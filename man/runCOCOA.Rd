% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/COCOA.R
\name{runCOCOA}
\alias{runCOCOA}
\title{Do COCOA with many region sets}
\usage{
runCOCOA(signal, signalCoord, GRList, signalCol = c("PC1", "PC2"),
  signalCoordType = "default", scoringMetric = "default",
  verbose = TRUE, wilcox.conf.int = FALSE, absVal = TRUE)
}
\arguments{
\item{signal}{matrix of loadings (the coefficients of 
the linear combination that defines each PC). One named column for each PC.
One row for each original dimension/variable (should be same order 
as original data/signalCoord). The x$rotation output of prcomp().}

\item{signalCoord}{a GRanges object or data frame with coordinates 
for the genomic signal/original data (eg DNA methylation) 
included in the PCA. Coordinates should be in the 
same order as the original data and the loadings 
(each item/row in signalCoord corresponds to a row in `signal`).
If a data.frame, must have chr and start columns.
If end is not included, start coordinate will be used for calculations.}

\item{GRList}{GRangesList object. Each list item is 
a distinct region set to test (region set: regions that correspond to 
the same biological annotation). The region set database.
Must be from the same reference genome
as the coordinates for the actual data/samples (signalCoord).}

\item{signalCol}{A character vector with principal components to
include. eg c("PC1", "PC2") These should be column names of signal.}

\item{signalCoordType}{character. Can be "default", "singleBase", or 
"multiBase". This describes whether the coordinates for `signal` 
(`signalCoord`) are each a single base (e.g. as for DNA methylation)
or a region/multiple bases (e.g. as for ATAC-seq). Different scoring
options are available for each type of data. If "default" is given,
the type of coordinates will be detected automatically. If each
coordinate start value equals the coordinate end value, "singleBase"
will be used. Otherwise, "multiBase" will be used.}

\item{scoringMetric}{A character object with the scoring metric.
There are different scoring metrics available for 
signalCoordType="singleBase" vs  signalCoordType="multiBase".
For "singleBase", the available scoring methods are "regionMean", 
"simpleMean", and "rankSum". The default method is "regionMean".
For "multiBase", the scoring methods are "proportionWeightedMean" and 
"simpleMean". The default is "proportionWeightedMean".
"regionMean" is a weighted
average of the signal, weighted by region (absolute value of signal 
if absVal=TRUE). First the signal is
averaged within each regionSet region, 
then all the regions are averaged. With
"regionMean" score, be cautious in interpretation for
region sets with low number of regions that overlap signalCoord. 
The "simpleMean"
method is just the unweighted average of all (absolute) signal values that
overlap the given region set. For multiBase data, this includes
signal regions that overlap a regionSet region at all (1 base
overlap or more) and the signal for each overlapping region is
given the same weight for the average regardless of how much it overlaps. 
"proportionWeightedMean" is a weighted average of all signalCoord 
regions that overlap with regionSet regions. For each signalCoord region
that overlaps with a regionSet region, we calculate what proportion
of the regionSet region is covered. Then this proportion is used to
weight the signal value when calculating the mean. 
The denominator of the mean
is the sum of all the proportion overlaps. 
Wilcoxon rank sum test ("rankSum") is also supported but is
skewed toward ranking large region sets highly and is
significantly slower than the "regionMean" method. 
For the ranksum method, the absolute loadings for loadings that
overlap the given region set are taken as a group and all the
loadings that do not overlap the region set are taken as
the other group. Then p value is then given as the score.
It is a one sided test, with the alternative hypothesis
that the loadings in the region set will be greater than
the loadings not in the region set.}

\item{verbose}{A "logical" object. Whether progress 
of the function should be shown, one
bar indicates the region set is completed.}

\item{wilcox.conf.int}{logical. Only applies when using "rankSum" scoring
method. returns a 95% confidence interval from the Wilcoxon rank sum test
instead of p value.}

\item{absVal}{logical. If TRUE, take the absolute value of values in
signal. Choose TRUE if you think there may be some 
genomic loci in a region set that will increase and others
will decrease (if there may be anticorrelation between
regions in a region set). Choose FALSE if you expect regions in a 
given region set to all change in the same direction (all be positively
correlated with each other).}
}
\value{
data.frame of results, one row for each region set. 
One column for each PC in signalCol
with score for that PC for a given region set (specific score depends
on "scoringMetric" parameter). 
Rows will be in the same order as region sets in GRList
"signalCoverage" column has number of cytosines (or regions) that 
overlapped with the given region set (or in the general case, 
coordinates from signalCoord that overlapped regionSet).
"regionSetCoverage" column has number of regions 
that overlapped any coordinates from signalCoord.
"total_region_number" column has total number of regions. 
"mean_region_size" has average region size (average of all regions,
not just those that overlap a cytosine).
}
\description{
This function will give each region set a score for each PC
in `signalCol` based on
the `scoringMetric` parameter. Based on these scores, you can determine
which region sets out of a region set database (given by GRList) 
are most associated with the top PCs. See the vignette "Introduction
to Coordinate Covariation Analysis" for help interpreting your 
results.
}
\examples{
data("brcaMCoord1")
data("brcaLoadings1")
data("esr1_chr1")
rsScores <- runCOCOA(signal=brcaLoadings1, 
                                 signalCoord=brcaMCoord1, 
                                 GRList=GRangesList(esr1_chr1), 
                                 signalCol=c("PC1", "PC2"), 
                                 scoringMetric="regionMean")

}
